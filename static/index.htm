<html>
  <head>
    <title>INFO4310 HW1 SF Tree Visualizations</title>

    <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js"></script>
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
    <style>
      .neighborhood {
        fill: #eee;
        stroke: white;
        stroke-width: 2px;
      }
      .center {
        display: block;
        margin-top: 30px;
        margin-left: auto;
        margin-right: auto;
        width: 50%;
        font-family: "Franklin Gothic Medium";
        font-size: 26px;
        color: rgb(71, 71, 71);
      }
      h1 {
        font-size: 70px;
        display: block;
        margin-top: 10px;
        margin-left: 25%;
        margin-right: auto;
        width: 50%;
        font-family: "Franklin Gothic Medium";
        font-size: 35px;
      }
    </style>
  </head>
  <body>
    <h1>An Exploration into San Francisco Tree Legality</h1>
    <h2 class="center">Map of Legal Status (for non DPW Maintained Trees)</h2>
    <svg id="legalmap" height="700" width="1200"></svg>
    <h2 class="center">
      Average Diameter at Breast Height (DBH) by Legal Status
    </h2>
    <svg class="center" id="legalDBHbars" height="700" width="750"></svg>

    <script id="mapvis">
      const svg = d3.select("#legalmap");
      const width = svg.attr("width");
      const height = svg.attr("height");
      const margin = { top: 25, right: 350, bottom: 25, left: 10 };
      const mapwidth = width - margin.left - margin.right;
      const mapheight = height - margin.top - margin.bottom;

      const lmap = svg
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      const requestData = async function () {
        // same as setup demo:
        const geosf = await d3.json("./SF-Neighborhoods.geo.json");
        //console.log(sf);

        const nbhds = topojson.feature(geosf, geosf.objects.SFNeighborhoods);

        var projection = d3.geoMercator().fitSize([mapwidth, mapheight], nbhds);
        var path = d3.geoPath().projection(projection);

        lmap
          .selectAll("path.neighborhood")
          .data(nbhds.features)
          .join("path")
          .attr("class", "neighborhood")
          .attr("d", path);

        const trees = await d3.csv(
          "./Street_Tree_List-2022-01-30_FILTERED.csv"
        );

        // create array of unique legal statuses
        // some legalstatus were empty, so we need to check for empty str
        let legalstat = [];
        trees.forEach((d) => {
          d.Position = projection([d.Longitude, d.Latitude]);
          if (d.qLegalStatus !== "" && !legalstat.includes(d.qLegalStatus)) {
            legalstat.push(d.qLegalStatus);
          }
        });

        // create color categories for legal statuses
        const legalcol = d3.scaleOrdinal().domain(legalstat).range([
          "none",
          "#99cca7", // green = permitted site
          "#1f84f0", // blue = section law tree
          "#f0391f", // red = undocumented
          "#9d47bf", // purple = significant/landmark tree (aka special)
          "#454445", // grey = private/opt-out tree (aka left alone)
          "orange", // orange = planning code required (may be illegal)
          "#454445", // grey = private/opt-out tree (aka left alone)
          "#1f84f0", // blue = section law tree
          "#9d47bf", // purple = significant/landmark tree (aka special)
          "#454445", // grey = private/opt-out tree (aka left alone)
          "#454445", // grey = private/opt-out tree (aka left alone)
        ]);

        // fill data circles
        lmap
          .selectAll("circle")
          .data(trees)
          .join("circle")
          .attr("cx", (d) => d.Position[0])
          .attr("cy", (d) => d.Position[1])
          .attr("r", 4)
          .attr("fill", (d) =>
            d.qLegalStatus == "DPW Maintained"
              ? "none"
              : legalcol(d.qLegalStatus)
          )
          .attr("opacity", (d) =>
            d.qLegalStatus !== "Permitted Site" ? 0.5 : 0.3
          );

        // add legend squares + text labels
        svg
          .selectAll("legendsquares")
          .data(legalstat)
          .enter()
          .append("rect")
          .attr("width", 20)
          .attr("height", 20)
          .attr("x", 780)
          .attr("y", (d, i) => 210 + i * 30)
          .attr("opacity", 0.8)
          .attr("fill", (d) => (d == "DPW Maintained" ? "none" : legalcol(d)));

        svg
          .selectAll("legendtexts")
          .data(legalstat)
          .enter()
          .append("text")
          .attr("x", 820)
          .attr("y", (d, i) => 222 + i * 30)
          .attr("fill", (d) => (d == "DPW Maintained" ? "none" : legalcol(d)))
          .text((d) => d)
          .attr("text-anchor", "left")
          .attr("font-size", 25)
          .attr("font-family", "Franklin Gothic Medium")
          .style("alignment-baseline", "middle");

        // second visualization
        // bar graph: average DBH per legal status category
        const marginb = { top: 30, right: 30, bottom: 210, left: 70 };
        const widthb = 760 - marginb.left - marginb.right;
        const heightb = 700 - marginb.top - marginb.bottom;

        const svgb = d3
          .select("#legalDBHbars")
          .append("svg")
          .attr("width", widthb + marginb.left + marginb.right)
          .attr("height", heightb + marginb.top + marginb.bottom)
          .append("g")
          .attr(
            "transform",
            "translate(" + marginb.left + "," + marginb.top + ")"
          );

        const xb = d3
          .scaleBand()
          .range([0, widthb])
          .domain(legalstat.map((d) => d))
          .padding(0.25);
        svgb
          .append("g")
          .attr("transform", "translate(0," + heightb + ")")
          .call(d3.axisBottom(xb))
          .selectAll("text")
          .style("font-family", "Franklin Gothic Medium")
          .style("font-size", "15px")
          .attr("transform", "translate(-10,0)rotate(-45)")
          .style("text-anchor", "end");

        const yb = d3.scaleLinear().domain([0, 50]).range([heightb, 0]);
        svgb
          .append("g")
          .call(d3.axisLeft(yb))
          .style("font-family", "Franklin Gothic Medium")
          .style("font-size", "15px");

        svgb
          .append("text")
          .attr("class", "y label")
          .attr("text-anchor", "end")
          .attr("y", -60)
          .attr("dy", ".75em")
          .attr("transform", "rotate(-90)")
          .text("Average DBH");

        // iteratively build the data and averages
        let dbhtmp = [];
        trees.forEach((d) => {
          dbhtmp.push([d.qLegalStatus, d.DBH]);
        });

        let dbhtmp2 = [];
        for (let k = 0; k < legalstat.length; k++) {
          let tmp = [];
          for (let n = 0; n < dbhtmp.length; n++) {
            if (legalstat[k] == dbhtmp[n][0]) {
              tmp.push(dbhtmp[n][1]);
            }
          }
          dbhtmp2.push(tmp);
        }

        let dbhtmp3 = [];
        for (let k = 0; k < dbhtmp2.length; k++) {
          numer = 0;
          for (let n = 0; n < dbhtmp2[k].length; n++) {
            numer += parseInt(dbhtmp2[k][n]);
          }
          dbhtmp3.push(numer / dbhtmp2[k].length);
        }
        console.log(dbhtmp3);

        svgb
          .selectAll("bars")
          .data(dbhtmp3)
          .enter()
          .append("rect")
          .attr("x", (d) => xb(legalstat[dbhtmp3.indexOf(d)]))
          .attr("y", (d) => yb(d))
          .attr("width", xb.bandwidth())
          .attr("height", (d) => heightb - yb(d))
          .attr("fill", (d) => legalcol(legalstat[dbhtmp3.indexOf(d)]));
      };
      requestData();
    </script>
  </body>
</html>
